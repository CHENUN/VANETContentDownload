diff -ur ns-2.33-original/aodv/aodv.cc ns-2.33/aodv/aodv.cc
--- ns-2.33-original/aodv/aodv.cc	2009-08-26 15:53:42.000000000 +0200
+++ ns-2.33/aodv/aodv.cc	2009-08-26 16:19:24.000000000 +0200
@@ -479,6 +479,11 @@
   * I don't have a route.
   */
  else {
+	// 1. The communications are all within one-hop range. There is no need for sending RERR message.
+	// 2. If the agent does not have the route for the message, the following two lines will also transmit it as the broadcast message. Otherwise, some application messages will not be transmitted due to reason that the route has not been built.
+        assert(rt->rt_hops != INFINITY2);
+        forward(rt, p, NO_DELAY);
+        return;
  Packet *rerr = Packet::alloc();
  struct hdr_aodv_error *re = HDR_AODV_ERROR(rerr);
  /* 
@@ -1011,7 +1016,11 @@
 
  if (ch->ptype() != PT_AODV && ch->direction() == hdr_cmn::UP &&
 	((u_int32_t)ih->daddr() == IP_BROADCAST)
-		|| (ih->daddr() == here_.addr_)) {
+            || (ih->daddr() == here_.addr_)
+            || (ih->daddr() != here_.addr_ && (u_int32_t)ih->daddr() != IP_BROADCAST
+		&& ch->direction() == hdr_cmn::UP && ch->ptype() == PT_MESSAGE)) {
+	// Add the support for promiscuous mode
+	// If the message type is PT_MESSAGE, which is the message type of MessagePassingAgent, the message is passed to the upper port classifier.
 	dmux_->recv(p,0);
 	return;
  }
diff -ur ns-2.33-original/aodv/aodv.h ns-2.33/aodv/aodv.h
--- ns-2.33-original/aodv/aodv.h	2009-08-26 15:53:42.000000000 +0200
+++ ns-2.33/aodv/aodv.h	2009-08-26 16:19:24.000000000 +0200
@@ -81,9 +81,11 @@
 
 // No. of times to do network-wide search before timing out for 
 // MAX_RREQ_TIMEOUT sec. 
-#define RREQ_RETRIES            3  
+#define RREQ_RETRIES            1  
 // timeout after doing network-wide search RREQ_RETRIES times
-#define MAX_RREQ_TIMEOUT	10.0 //sec
+#define MAX_RREQ_TIMEOUT	0.1 //sec
+// The changes made here seems to be more vague. Actually it is a compromise.  
+// If the AP finds out it can not send the message to the vehicle, it will try to rebuild the route by sending RREQ_RETRIES and the message will be stored in the sending queue cache. The waiting timeout value could be large. However in our scenario, if the AP can not send the message, it should simply try to send to the next vehicle. So I decrease the value. The final solution should be modifying the protocol to let the AP send the message immediately instead of trying to rebuild the route.  
 
 /* Various constants used for the expanding ring search */
 #define TTL_START     5
Only in ns-2.33/apps: VCDBase.h
Only in ns-2.33/apps: VCD.cc
Only in ns-2.33/apps: VCD.h
diff -ur ns-2.33-original/common/agent.h ns-2.33/common/agent.h
--- ns-2.33-original/common/agent.h	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/common/agent.h	2009-08-26 16:20:15.000000000 +0200
@@ -79,7 +79,7 @@
 
 	void send(Packet* p, Handler* h) { target_->recv(p, h); }
 	virtual void timeout(int tno);
-
+	virtual void sendmsgWithAck(int, AppData*, VCDBase*) {};
 	virtual void sendmsg(int sz, AppData*, const char* flags = 0);
 	virtual void send(int sz, AppData *data) { sendmsg(sz, data, 0); }
 	virtual void sendto(int sz, AppData*, const char* flags,
diff -ur ns-2.33-original/common/messpass.cc ns-2.33/common/messpass.cc
--- ns-2.33-original/common/messpass.cc	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/common/messpass.cc	2009-08-26 16:19:24.000000000 +0200
@@ -8,7 +8,7 @@
 #include "random.h"
 #include "address.h"
 #include "ip.h"
-
+#include "VCDBase.h" 
 
 static class MessagePassingAgentClass : public TclClass {
 public:
@@ -28,6 +28,34 @@
 	bind("packetSize_", &size_);
 }
 
+void MessagePassingAgent::sendmsgWithAck(int nbytes, AppData* data, VCDBase* ackHandler)
+{
+        Packet *p;
+        if (nbytes == -1) {
+                printf("Error:  sendmsg() for MessagePassingAgent should not be -1\n");
+                return;
+        }       
+
+        // check packet size (we don't fragment packets)
+        if (nbytes > size_) {
+                printf("Error: packet greater than maximum MessagePassingAgent packet size\n");
+                return;
+        }
+
+        double local_time = Scheduler::instance().clock();
+        p = allocpkt();
+        p -> ackHandler = ackHandler;
+        hdr_cmn::access(p)->size() = nbytes;
+        hdr_rtp* rh = hdr_rtp::access(p);
+        rh->flags() = 0;
+        rh->seqno() = ++seqno_;
+        hdr_cmn::access(p)->timestamp() = 
+            (u_int32_t)(SAMPLERATE*local_time);
+        p->setdata(data);
+        target_->recv(p);
+        idle();
+}
+
 void MessagePassingAgent::sendmsg(int nbytes, AppData* data, const char* flags)
 {
 	Packet *p;
diff -ur ns-2.33-original/common/messpass.h ns-2.33/common/messpass.h
--- ns-2.33-original/common/messpass.h	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/common/messpass.h	2009-08-26 16:19:24.000000000 +0200
@@ -18,6 +18,7 @@
 		sendmsg(nbytes, NULL, flags);
 	}
 	virtual void sendmsg(int nbytes, AppData* data, const char *flags = 0);
+	virtual void sendmsgWithAck(int, AppData*, VCDBase*);
 	virtual void recv(Packet* pkt, Handler*);
 	virtual int command(int argc, const char*const* argv);
 	virtual void sendto(int nbytes, const char* flags, ns_addr_t dst)
diff -ur ns-2.33-original/common/ns-process.h ns-2.33/common/ns-process.h
--- ns-2.33-original/common/ns-process.h	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/common/ns-process.h	2009-08-26 16:19:24.000000000 +0200
@@ -87,6 +87,9 @@
 	//Diffusion ADU
 	DIFFUSION_DATA,
 
+	//Vehicular Content Downloading
+	VCD_DATA,
+
 	// Last ADU
 	ADU_LAST
 
diff -ur ns-2.33-original/common/packet.h ns-2.33/common/packet.h
--- ns-2.33-original/common/packet.h	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/common/packet.h	2009-08-26 16:19:24.000000000 +0200
@@ -39,7 +39,7 @@
 
 #include <string.h>
 #include <assert.h>
-
+#include "VCDBase.h"
 #include "config.h"
 #include "scheduler.h"
 #include "object.h"
@@ -405,8 +405,10 @@
                             (type) == PT_VIDEO || \
                             (type) == PT_ACK || \
                             (type) == PT_SCTP || \
+                            (type) == PT_MESSAGE || \
                             (type) == PT_SCTP_APP1 \
                             )
+// PT_MESSAGE is added to notify the routing agent that PT_MESSAGE is a data packet so that the it will not be dropped. It is modified to solve the CBK problem. 
 
 //#define OFFSET(type, field)	((long) &((type *)0)->field)
 #define OFFSET(type, field) ( (char *)&( ((type *)256)->field )  - (char *)256)
@@ -459,6 +461,7 @@
 	Packet* next_;		// for queues and the free list
 	static int hdrlen_;
 
+	VCDBase* ackHandler;
 	Packet() : bits_(0), data_(0), ref_count_(0), next_(0) { }
 	inline unsigned char* const bits() { return (bits_); }
 	inline Packet* copy() const;
diff -ur ns-2.33-original/mac/mac-802_11.cc ns-2.33/mac/mac-802_11.cc
--- ns-2.33-original/mac/mac-802_11.cc	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/mac/mac-802_11.cc	2009-08-26 16:19:24.000000000 +0200
@@ -57,7 +57,7 @@
 // Added by Sushmita to support event tracing
 #include "agent.h"
 #include "basetrace.h"
-
+#include "VCDBase.h"
 
 /* our backoff timer doesn't count down in idle times during a
  * frame-exchange sequence as the mac tx state isn't idle; genreally
@@ -1353,8 +1353,8 @@
 	(*rcount)++;
 
 
-
-	if (*rcount == 3 && handoff == 0) {
+	//Handoff triggered in Ad-hoc mode too. Bug resolved by checking if it is infrastructure mode before handoff trigger.
+	if (bss_id_ != (int)IBSS_ID && *rcount == 3 && handoff == 0) {	
 		//start handoff process
 		printf("Client %d: Handoff Attempted\n",index_);
 		associated = 0;
@@ -1378,6 +1378,8 @@
                                           ch->xmit_failure_data_);
                 }
 
+		//Before discarding the packets, it callbacks the inCorrectSend function.
+		pktTx_->ackHandler->inCorrectSend();
 		discard(pktTx_, DROP_MAC_RETRY_COUNT_EXCEEDED); 
 		pktTx_ = 0;
 		*rcount = 0;
@@ -1708,6 +1710,22 @@
 	 * Address Filtering
 	 */
 	if(dst != (u_int32_t)index_ && dst != MAC_BROADCAST) {
+	        // the application needs 802.11 promiscuous mode
+	        // to be turned on, thus we pass the packet to the
+	        // upper layer even if it is destined to a different
+	        // mobile node
+	        if (type == MAC_Type_Data &&
+	                subtype == MAC_Subtype_Data &&
+	                ch->ptype() == PT_MESSAGE) {
+	            // adjust the MAC packet size
+	            // i.e. strip off the mac header
+	            ch->size() -= phymib_.getHdrLen11();
+	            ch->num_forwards() += 1;
+	
+	            uptarget_->recv(pktRx_, (Handler*) 0);
+	            goto done;
+	        }
+
 		/*
 		 *  We don't want to log this event, so we just free
 		 *  the packet instead of calling the drop routine.
@@ -2066,6 +2084,10 @@
 
 	mhSend_.stop();
 
+	// In this function, the sender correctly receives the ACK message. It means that the TX is successful. Then it calls correctSend() function.
+	if (pktTx_->userdata() && pktTx_->userdata()->type() == VCD_DATA) {
+	        pktTx_->ackHandler->correctSend();
+	}
 	/*
 	 * The successful reception of this ACK packet implies
 	 * that our DATA transmission was successful.  Hence,
diff -ur ns-2.33-original/Makefile.in ns-2.33/Makefile.in
--- ns-2.33-original/Makefile.in	2009-08-26 15:53:42.000000000 +0200
+++ ns-2.33/Makefile.in	2009-08-26 16:19:24.000000000 +0200
@@ -175,6 +175,7 @@
         src_rtg/sragent.o src_rtg/hdr_src.o adc/ump.o \
 	qs/qsagent.o qs/hdr_qs.o \
 	apps/app.o apps/telnet.o tcp/tcplib-telnet.o \
+	apps/VCD.o \
 	tools/trafgen.o trace/traffictrace.o tools/pareto.o \
 	tools/expoo.o tools/cbr_traffic.o \
 	adc/tbf.o adc/resv.o adc/sa.o tcp/saack.o \
diff -ur ns-2.33-original/tcl/lib/ns-default.tcl ns-2.33/tcl/lib/ns-default.tcl
--- ns-2.33-original/tcl/lib/ns-default.tcl	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/tcl/lib/ns-default.tcl	2009-08-26 16:19:24.000000000 +0200
@@ -1462,3 +1462,5 @@
 Agent/PBC set periodicBroadcastVariance 0.1
 Agent/PBC set modulationScheme 0
 
+Application/VCDClient set id_ -1
+Application/VCDServer set id_ -1
diff -ur ns-2.33-original/tcl/lib/ns-packet.tcl ns-2.33/tcl/lib/ns-packet.tcl
--- ns-2.33-original/tcl/lib/ns-packet.tcl	2009-08-26 15:53:43.000000000 +0200
+++ ns-2.33/tcl/lib/ns-packet.tcl	2009-08-26 16:19:24.000000000 +0200
@@ -154,6 +154,7 @@
 	Message # a protocol to carry text messages
 	Ping 	# Ping
     PBC     # PBC
+        VCD     # VCD
 # Wireless:
 	ARP 	# Address Resolution Protocol, network wireless stack
 	GAF 	# Geographic Adaptive Delity, for ad-hoc networks
