# The test of cross-layer communication 
# Author: Zou Zhenhua

# ======================================================================
# common parameters
# ======================================================================
set val(chan)		Channel/WirelessChannel			;# channel type
set val(prop)		Propagation/TwoRayGround		;# radio-propagation model
set val(netif)		Phy/WirelessPhy				;# network interface type
set val(mac)		Mac/802_11				;# MAC type
set val(ifq)		Queue/DropTail/PriQueue			;# interface queue type
set val(ll)		LL					;# link layer type
set val(ant)		Antenna/OmniAntenna			;# antenna model
set val(ifqlen)		50					;# max packet in ifq
set val(rp)		AODV					;# routing protocol
set val(cp)		Trace           			;# the mobility file generated by VanetMobiSim
set val(start)          1.0                                     ;# simulation start time
set val(stop)		350.0					;# simulation stop time
set val(nn)             3                                       ;# number of the nodes
# ======================================================================
# Main Program
# ======================================================================

# Initialize Global Variables
set ns_     [new Simulator]

$ns_ use-newtrace
set tracefd [open "| awk -f filter.awk > wireless.tr" w]
$ns_ trace-all $tracefd

set namtrace [open out.nam w]
$ns_ namtrace-all-wireless $namtrace 1000 1000

# Set Up Topography Object
set topo       [new Topography]
$topo load_flatgrid 1000 1000

# Create God
create-god $val(nn)

# Configure default data rate for 802.11
Mac/802_11 set dataRate_ 11Mb
# Disable RTS/CTS
Mac/802_11 set RTSThreshold_ 3000

# the transmission range is 150m
Phy/WirelessPhy set RXThresh_ 2.81838e-09

# Configure Node
$ns_ node-config -adhocRouting $val(rp) \
		 -llType $val(ll) \
		 -macType $val(mac) \
		 -ifqType $val(ifq) \
		 -ifqLen $val(ifqlen) \
		 -antType $val(ant) \
		 -propType $val(prop) \
		 -phyType $val(netif) \
		 -topoInstance $topo \
		 -agentTrace ON \
		 -routerTrace OFF \
		 -macTrace OFF \
		 -movementTrace OFF \
		 -channel [new $val(chan)]
			 
# Define Vehicles & Access Point nodes
for {set i 0} {$i < $val(nn) } {incr i} {
	set node_($i) [$ns_ node]
	$node_($i) random-motion 0
}

# Define Node Movement Model
puts "Loading mobility pattern..."
source $val(cp)

for {set i 0} {$i < $val(nn)} {incr i} {
    # 10 defines the node size in nam, must adjust it according to your scenario  
    # The function must be called after mobility model is defined
    $ns_ initial_node_pos $node_($i) 10
}

# ======================================================================
# Group Management Class
# ======================================================================
#set gm [new GroupManager]

# ======================================================================
# Traffic Type & Simluation Time
# ======================================================================

#Create a UDP agent and attach it to node n0
set udp0 [new Agent/MessagePassing]
$ns_ attach-agent $node_(0) $udp0

# Create a CBR traffic source and attach it to udp0
set cbr0 [new Application/Traffic/CBR]
$cbr0 set packetSize_ 500
$cbr0 set interval_ 1
$cbr0 attach-agent $udp0

#Create a UDP agent and attach it to node n2
#set udp2 [new Agent/MessagePassing]
#$ns_ attach-agent $node_(2) $udp2

# Create a CBR traffic source and attach it to udp0
#set cbr2 [new Application/Traffic/CBR]
#$cbr2 set packetSize_ 500
#$cbr2 set interval_ 1
#$cbr2 attach-agent $udp2

set null0 [new Agent/Null]
$ns_ attach-agent $node_(1) $null0

$ns_ connect $udp0 $null0
#$ns_ connect $udp2 $null0

$ns_ at 0.5 "$cbr0 start"
#$ns_ at 0.5 "$cbr2 start"

#$ns_ at 150 "$ns_ connect $udp0 $null1"

$ns_ at $val(stop) "$cbr0 stop"
#$ns_ at $val(stop) "$cbr2 stop"

# ======================================================================
# global simluation time
# ======================================================================
$ns_ at $val(stop).9999 "puts \"NS EXITING...\" ; $ns_ halt"
$ns_ at $val(stop) "stop"

# ======================================================================
# exit function
# ======================================================================
proc stop {} {
    global ns_ tracefd
    global namtrace
    $ns_ flush-trace
    close $tracefd
    close $namtrace
}

# ======================================================================
# start
# ======================================================================
puts "Starting Simulation..."
$ns_ run
